@page "/crud/{clubid?}"

<PageTitle>CRUD - StarTED</PageTitle>
@rendermode InteractiveServer

@using StarTEDSystem.BLL;
@using StarTEDSystem.Entities;

<h3 class="text-center my-5">CRUD Component for Clubs</h3>

@if (feedback.Length > 0)
{
    <div class="alert alert-info">
        <p>@feedback</p>
    </div>
}

@if (errors.Count > 0)
{
    <div class="alert alert-danger">
        <p>Please fix the following issues:</p>
        <ul>
            @foreach (var error in errors)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

<EditForm EditContext="@_editContext" class="my-5">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row">
        <div class="offset-2 col-8">

            <label for="clubid" class="form-label">Club ID</label>
            <InputText @bind-Value="_currentClub.ClubID" class="form-control" readonly="@(!IsNewClub())" id="clubid"/>
            <ValidationMessage For="@(() => _currentClub.ClubID)"></ValidationMessage>

            <label for="clubname" class="form-label">Club Name</label>
            <InputText @bind-Value="_currentClub.ClubName" class="form-control" id="clubname"/>
            <ValidationMessage For="@(() => _currentClub.ClubName)"></ValidationMessage>

            <label for="clubstaff" class="form-label">Staff</label>
            <InputSelect id="clubstaff" @bind-Value="_currentClub.EmployeeID" class="form-control">
                <option value="0">...Select an employee</option>
                @* Last name + first name *@
                @foreach (Employee person in _employeeList)
                {
                    <option value="@person.EmployeeID">@person.FullName</option>
                }


            </InputSelect>
            @* <InputNumber @bind-Value="_currentClub.EmployeeID" class="form-control" id="clubstaff" /> *@
            <ValidationMessage For="@(() => _currentClub.EmployeeID)"></ValidationMessage>

            <label for="clubfee" class="form-label">Fee</label>
            <InputNumber @bind-Value="FormattedFee" class="form-control" id="clubfee"/>
            <ValidationMessage For="@(() => _currentClub.Fee)"></ValidationMessage>
        </div>
    </div>

    <div class="container-fluid my-5 d-flex justify-content-around">
        <div class="text-center">
            
            @if (IsNewClub())
            {
                <button type="submit" class="btn btn-primary mx-auto p-2 my-2" @onclick="AddClub" style="width:150px;">Add Club</button>
            }
           
            else
            {
                <button type="submit" class="btn btn-primary mx-auto p-2 my-2" @onclick="UpdateClub" style="width:150px;">Update Club</button>
            }
            &nbsp;&nbsp;&nbsp;&nbsp;
            @if (_currentClub.Active)
            {
                <button type="submit" class="btn btn-primary mx-auto p-2 my-2" @onclick="DectivateClub" style="width:150px;">Deactivate</button>
            }
            else
            {
                <button type="submit" class="btn btn-primary mx-auto p-2 my-2" @onclick="ActivateClub" style="width:150px;">Activate</button>
            }
            &nbsp;&nbsp;&nbsp;&nbsp;
            <button type="submit" class="btn btn-primary mx-auto p-2 my-2" @onclick="OnClear" style="width:150px;">Clear</button>
            &nbsp;&nbsp;&nbsp;&nbsp;
            <button type="submit" class="btn btn-outline-primary mx-auto p-2 my-2" @onclick="OnGoTo" style="width:150px;"> Return To Query</button>
        </div>
    </div>

</EditForm>


@code {
    private string feedback = "";
    private List<string> errors = new List<string>();

    [Parameter]
    public string clubid { get; set; }


    // EditForm
    private EditContext _editContext;
    private Club _currentClub = new Club();
    ValidationMessageStore ValidationMessageStore = null;


    // Services
    [Inject]
    private ClubServices _clubServices { get; set; }


    [Inject]
    private EmployeeServices _employeeServices { get; set; }
    private List<Employee> _employeeList = new List<Employee>();

    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    [Inject]
    private NavigationManager navManager { get; set; }

    private Exception getInnerException(Exception ex)
    {
        while (ex.InnerException != null)
        {
            ex = ex.InnerException;
        }
        return ex;
    }

    protected override void OnInitialized()
    {
        if (!string.IsNullOrWhiteSpace(clubid))
        {
            _currentClub = _clubServices.Club_GetByClubID(clubid);
        }

        _editContext = new EditContext(_currentClub);

        ValidationMessageStore = new ValidationMessageStore(_editContext);

        _employeeList = _employeeServices.Employee_GetEmployeesHaveSpecificPosition();

        //_employeeList = _employeeServices.Employee_GetEmployeesWithAClub();

        // _employeeList = _employeeServices.Employee_GetAll();

        base.OnInitialized();
    }

    private bool IsNewClub()
    {
       return string.IsNullOrWhiteSpace(clubid) ;
    }
    

    private void AddClub()
    {
        feedback = "";
        errors.Clear();
        ValidationMessageStore.Clear();

        try
        {
            if (_currentClub.EmployeeID == 0)
            {
                _currentClub.EmployeeID = null;
            }

            if (_editContext.Validate())
            {
                if (string.IsNullOrWhiteSpace(_currentClub.ClubID))
                {
                    ValidationMessageStore.Add(_editContext.Field(nameof(_currentClub.ClubID)), "You must supply Club ID");
                }
                if (_editContext.GetValidationMessages().Any())
                {
                   
                    _editContext.NotifyValidationStateChanged();
                }
                else
                {
                    int rowsaffected = _clubServices.Club_Add(_currentClub);

                    if (rowsaffected > 0)
                    {
                        feedback = "Club added successfully.";
                    }
                    else
                    {
                        feedback = $"Club:{_currentClub.ClubName} has not added.";
                    }
                }
   
            }

        }
        catch (ArgumentNullException ex)
        {
            errors.Add($"Missing Data: {getInnerException(ex).Message}");
        }
        catch (ArgumentException ex)
        {
            errors.Add($"Data Issue: {getInnerException(ex).Message}");
        }
        catch (Exception ex)
        {
            errors.Add($"System Error: {getInnerException(ex).Message}");
        }

    }

    private void UpdateClub()
    {
        feedback = "";
        errors.Clear();
        ValidationMessageStore.Clear();

        try
        {
            if (_currentClub.EmployeeID == 0)
            {
                _currentClub.EmployeeID = null;
            }

            if (_editContext.Validate())
            {
                int rowsaffected = _clubServices.Club_Update(_currentClub);

                if (rowsaffected > 0)
                {
                    feedback = "Club updated successfully.";
                }
                else
                {
                    feedback = $"Club:{_currentClub.ClubName} has not updated.";
                }
               
            }
        }
        catch (ArgumentNullException ex)
        {
            errors.Add($"Missing Data: {getInnerException(ex).Message}");
        }
        catch (ArgumentException ex)
        {
            errors.Add($"Data Issue: {getInnerException(ex).Message}");
        }
        catch (Exception ex)
        {
            errors.Add($"System Error: {getInnerException(ex).Message}");
        }

    }

    private void ActivateClub()
    {
        feedback = "";
        errors.Clear();
        ValidationMessageStore.Clear();

        try
        {
            if (_editContext.Validate())
            {
                int rowsaffected = _clubServices.Club_ActivateDeactivate(_currentClub, true);

                if (rowsaffected > 0)
                {
                    feedback = "Club activated successfully.";
                }
                else
                {
                    feedback = $"Club:{_currentClub.ClubName} activation failed.";
                }
            }
        }
        catch (ArgumentNullException ex)
        {
            errors.Add($"Missing Data: {getInnerException(ex).Message}");
        }
        catch (ArgumentException ex)
        {
            errors.Add($"Data Issue: {getInnerException(ex).Message}");
        }
        catch (Exception ex)
        {
            errors.Add($"System Error: {getInnerException(ex).Message}");
        }


    }

    private void DectivateClub()
    {
        feedback = "";
        errors.Clear();
        ValidationMessageStore.Clear();

        try
        {
            if (_editContext.Validate())
            {
                int rowsaffected = _clubServices.Club_ActivateDeactivate(_currentClub, false);

                if (rowsaffected > 0)
                {
                    feedback = "Club deactivated successfully.";
                }
                else
                {
                    feedback = $"Club:{_currentClub.ClubName} deactivation failed.";
                }
            }
        }
        catch (ArgumentNullException ex)
        {
            errors.Add($"Missing Data: {getInnerException(ex).Message}");
        }
        catch (ArgumentException ex)
        {
            errors.Add($"Data Issue: {getInnerException(ex).Message}");
        }
        catch (Exception ex)
        {
            errors.Add($"System Error: {getInnerException(ex).Message}");
        }
    }

    private async Task OnClear()
    {
        feedback = "";
        object[] messageline = new object[] { "Clearing will lose all unsaved data." + " Are you sure you want to clear the form?" };
        if (await JSRuntime.InvokeAsync<bool>("confirm", messageline))
        {
            errors.Clear();
            feedback = "";
            ValidationMessageStore.Clear();
            _currentClub = new Club();
            // remember to reset your editContext
            _editContext = new EditContext(_currentClub);
        }
    }

    private async Task OnGoTo()
    {
        feedback = "";

        object[] messageline = new object[] { "Leaving the page will lose all unsaved data." + " Are you sure you want to clear the form?" };
        if (await JSRuntime.InvokeAsync<bool>("confirm", messageline))
        {
            navManager.NavigateTo("query");

        }
        
    }

    private decimal FormattedFee
    {
        get { return Math.Round(_currentClub.Fee, 2); }
        set
        {
            _currentClub.Fee = value;
        }
    }


}
