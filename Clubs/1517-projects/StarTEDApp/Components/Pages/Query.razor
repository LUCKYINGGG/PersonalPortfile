@page "/query"

<PageTitle>Query - StarTED</PageTitle>
@rendermode InteractiveServer

@using System.Globalization
@using StarTEDSystem.BLL;
@using StarTEDSystem.Entities;

<h3 class="text-center my-5">Query Component for Clubs</h3>
<h4 class="my-5">Clubs by Status</h4>

@if (_feedback.Length > 0)
{
    <div class="alert alert-info">
        <p>@_feedback</p>
    </div>
}
@if (_errors.Count > 0)
{
    <div class="alert alert-danger">
        <p>Please fix the following issues:</p>
        <ul>
            @foreach (var error in _errors)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

<div class="col-12">

    <fieldset>
        <legend class="d-inline"><strong>Select a club status: </strong></legend>
        <div>
            <input type="radio" id="activeclub" name="status" @onclick="OnActive" checked="@_currentStatus" />
            <label for="activeclub">Active</label>
        </div>

        <div>
            <input type="radio" id="inactiveclub" name="status" @onclick="OnInactive" checked="@(!_currentStatus)" />
            <label for="inactiveclub">Inactive</label>
        </div>

    </fieldset>
</div>

<div class="my-3">
    <button type="submit" class="btn btn-primary" @onclick="SearchClubs">Search</button>
    &nbsp;&nbsp;&nbsp;&nbsp;
    <button type="submit" class="btn btn-outline-primary"> <NavLink href="crud">Go To CRUD</NavLink></button>
</div>


<div class="row my-5">

    @if (clubList.Count > 0)
    {
        <div class="offset-1 col-10">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>&nbsp;</th>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Staff</th>
                        <th>Fee</th>
                    </tr>
                </thead>

                @try
                {
                    /* Pagination: 1st solution : get all data back at once, and then show the data page by page
                    <tbody>
                    @foreach (var item in clubList.Skip(itemsPerPage * (currentPageNumber - 1)).Take(itemsPerPage))
                        {
                            <tr>
                            <td><a href="/crud/@item.ClubID">Edit</a></td>
                            <td>@item.ClubID</td>
                            <td>@item.ClubName</td>
                            @* EmployeeID is nullable, so use a condition*@
                            @* <td>@item.Employee.FullName</td> *@
                            <td>@(item.Employee != null ? item.Employee.FullName : "No staff member")</td>
                                    @* 
                                    I found a simple way to format the fee as a currency. 
                                    Here is the documentation: https://learn.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings*@
                            <td>@item.Fee.ToString("F", CultureInfo.InvariantCulture)</td>
                    </tr>
                    }
                    </tbody>
                    */

                    // pagination: 2nd solution: get the total number of items back, and then show the data page by page
                    <tbody>
                        @foreach (var item in clubList)
                        {
                            <tr>
                                <td><a href="/crud/@item.ClubID">Edit</a></td>
                                <td>@item.ClubID</td>
                                <td>@item.ClubName</td>
                                @* EmployeeID is nullable, so use a condition*@
                                @* <td>@item.Employee.FullName</td> *@
                                <td>@(item.Employee != null ? item.Employee.FullName : "No staff member")</td>
                                @* 
                                    I found a simple way to format the fee as a currency. 
                                    Here is the documentation: https://learn.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings*@
                                <td>@item.Fee.ToString("F", CultureInfo.InvariantCulture)</td>
                            </tr>
                        }


                    </tbody>
                }
                catch (Exception ex)
                {
                    _errors.Add($"Data Error:{getInnerException(ex).Message}");
                }

            </table>

            <Pagination ActivePageNumber="@currentPageNumber"
            TotalPages="GetTotalPage()"
            PageChanged="OnPageChanged">

            </Pagination>
        </div>
    }

    else
    {
        <p style="font-size:38px; font-weight: bold">No club data available now.</p>
    }
</div>


@code {
    private string _feedback = "";
    private List<string> _errors = new List<string>();
    private bool _currentStatus = true;

    // Pagination
    private int currentPageNumber = 1;
    private int itemsPerPage = 16;

    // pagination: 2nd solution: get the total number of items back, and then show the data page by page
    private int totalItems = 0;


    [Inject]
    public ClubServices clubServices { get; set; }
    private List<Club> clubList = new List<Club>();
    [Inject]
    private NavigationManager _navManager { get; set; }

    private Exception getInnerException(Exception ex)
    {
        while (ex.InnerException != null)
        {
            ex = ex.InnerException;
        }
        return ex;
    }

    private void OnActive()
    {
        _currentStatus = true;
    }

    private void OnInactive()
    {
        _currentStatus = false;
    }

    private void SearchClubs()
    {
        _feedback = "";
        _errors.Clear();
        clubList.Clear();
        try
        {
            // clubList = clubServices.GetClubsByStatus(_currentStatus);
            totalItems = clubServices.GetClubsCountByStatus(_currentStatus);
            clubList = clubServices.GetClubs(_currentStatus, itemsPerPage, currentPageNumber);
        }

        catch (Exception ex)
        {
            _errors.Add($"System Error:{getInnerException(ex).Message}");
        }

    }

    // // Pagination: 1st solution : get all data back at once, and then show the data page by page
    // private async Task OnPageChangedAsync(int newPageNumber)
    // {

    //     await Task.Run(() => { currentPageNumber = newPageNumber; });

    // }
    
    // Pagination: 2nd solution: get the total number of items back, and then show the data page by page ( only load the data needed for that page)
    private void OnPageChanged(int newPageNumber)
    {
        currentPageNumber = newPageNumber;
        clubList = clubServices.GetClubs(_currentStatus, itemsPerPage, currentPageNumber);

    }

   
    private int GetTotalPage()
    {
        //int totalPage = Convert.ToInt32(System.Math.Ceiling(clubList.Count / 15.00));
        // s1
        // int totalPage = (clubList.Count + itemsPerPage - 1) / itemsPerPage;
        // return totalPage;
        
        //s2
        int totalPage = (totalItems + itemsPerPage -1) / itemsPerPage;
        return totalPage;

    }


}
